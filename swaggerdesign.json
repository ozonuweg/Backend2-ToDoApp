{
  "swagger": "2.0",
  "info": {
    "description": "This is an api server for a portfolio builder website.\n",
    "version": "1.0.0",
    "title": "Todo-app",
    "contact": {
      "email": "nya19001.edu"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "todo-app-backend2.herokuapp.com",
  "basePath": "/",
  "tags": [
    {
      "name": "event",
      "description": "Operations about events"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "Not Yet Implemented",
      "description": "These API endpoints are designed and will be created in the near future"
    }
  ],
  "schemes": ["https"],
  "paths": {
    "/event": {
      "get": {
        "tags": ["event"],
        "summary": "Get all events",
        "operationId": "getAllEvents",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "Array",
              "$ref": "#/definitions/Event"
            }
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "post": {
        "tags": ["event"],
        "summary": "Create event",
        "description": "This is for when an event is created",
        "operationId": "createEvent",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created event object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CredentialsforEvents"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "An Event object",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }

    },
    "/event/{eventName}": {
      "get": {
        "tags": ["event"],
        "summary": "Finds Events by name",
        "description": "Each event has a unique name, this will basically find a single event by an exact name almost like an id",
        "operationId": "findEventByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "eventName",
            "in": "path",
            "description": "Event name string is required and functions as id",
            "required": true,
            "type": "string"
            
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid event name value"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "put": {
        "tags": ["Not Yet Implemented"],
        "summary": "Updated event",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateEvent",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated event object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully modified event"
          },
          "400": {
            "description": "Invalid event supplied"
          },
          "404": {
            "description": "Event not found"
          }
        }
      },
      "delete": {
        "tags": ["Not Yet Implemented"],
        "summary": "Delete event",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteEvent",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted event"
          },
          "400": {
            "description": "Invalid event supplied"
          },
          "404": {
            "description": "Event not found"
          }
        }
      }
      },
      "/user": {
        "post": {
          "tags": ["user"],
          "summary": "Create user",
          "description": "This is for when a user creates an account.",
          "operationId": "createUser",
          "produces": ["application/json"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Created user object",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Credentials"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "successfully created user",
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "name": {
                    "type": "string",
                    "example": "Nike Theme"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid theme name value"
            }
          }
        }
      },
      "/user/login": {
        "get": {
          "tags": ["Not Yet Implemented"],
          "summary": "Logs user into the system",
          "operationId": "loginUser",
          "produces": ["application/json"],
          "parameters": [
            {
              "name": "username",
              "in": "query",
              "description": "The user name for login",
              "required": true,
              "type": "string"
            },
            {
              "name": "password",
              "in": "query",
              "description": "The password for login in clear text",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "headers": {
                "X-Rate-Limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "calls per hour allowed by the user"
                },
                "X-Expires-After": {
                  "type": "string",
                  "example": "Nike Event"
                }
              },
              "schema": {
                "type": "string"
              }
            },
            "400": {
              "description": "Invalid username/password supplied"
            }
          },
          "400": {
            "description": "Invalid event name value"
          }
        }
      },
      "/user/logout": {
        "get": {
          "tags": ["Not Yet Implemented"],
          "summary": "Logs out current logged in user session",
          "operationId": "logoutUser",
          "produces": ["application/json"],
          "parameters": [],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          }
        }
      },
      "/user/{username}": {
        "get": {
          "tags": ["user"],
          "summary": "Get user by user name",
          "operationId": "getUserByName",
          "produces": ["application/json"],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The name that needs to be fetched.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        },
        "put": {
          "tags": ["Not Yet Implemented"],
          "summary": "Updated user",
          "description": "This can only be done by the logged in user.",
          "operationId": "updateUser",
          "produces": ["application/json"],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "name that need to be updated",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Updated user object",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully modified user"
            },
            "400": {
              "description": "Invalid user supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        },
        "delete": {
          "tags": ["Not Yet Implemented"],
          "summary": "Delete user",
          "description": "This can only be done by the logged in user.",
          "operationId": "deleteUser",
          "produces": ["application/json"],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The name that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted user"
            },
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          }
        
      },
      "/user": {
        "get": {
          "tags": ["user"],
          "summary": "Get all users",
          "operationId": "getAllUsers",
          "produces": ["application/json"],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "Array",
                "$ref": "#/definitions/User"
              }
            },
            "500": {
              "description": "Error occurred"
            }
          }
        },
        "post": {
          "tags": ["user"],
          "summary": "Create user",
          "description": "This is for when a user creates an account",
          "operationId": "createUser",
          "produces": ["application/json"],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Created user object",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Credentials"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "A User object",
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      }
    },
  "definitions": {
    "User": {
      "type": "object",
      "required": ["password", "username"],
      "properties": {
        "_id": {
          "type": "integer",
          "format": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "required": ["title", "done", "date", "description"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "done": {
          "type": "boolean"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Credentials": {
      "type": "object",
      "required": ["password", "username"],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    }
    },
    "CredentialsforEvents": {
      "type": "object",
      "required": ["title", "done", "date", "description"],
      "properties": {
        "title": {
          "type": "string"
        },
        "done": {
          "type": "boolean"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
      
    }
  }
}